# ===============================================
# MODULE STUDY: sys
import sys

sys.argv    # The list of command line arguments passed to a Python script. argv[0] is the script name
# ............................................
sys.byteorder   # An indicator of the native byte order. This will have the value 'big' on big-endian (most-significant byte first) platforms, and 'little' on little-endian (least-significant byte first) platforms.
# ............................................
sys.builtin_module_names    # A tuple of strings giving the names of all modules that are compiled into this Python interpreter.
# ............................................
sys.call_tracing(func, args)    # Call func(*args), while tracing is enabled. The tracing state is saved, and restored afterwards. 
# ............................................
sys.copyright   # A string containing the copyright pertaining to the Python interpreter.
# ............................................
sys._clear_type_cache()     # Clear the internal type cache. The type cache is used to speed up attribute and method lookups.
# ............................................
sys._current_frames() 
# ............................................
sys.dllhandle   # Integer specifying the handle of the Python DLL. Availability: Windows.
# ............................................
sys.displayhook(value)  # If value is not None, this function prints it to sys.stdout, and saves it in __builtin__._.
# ............................................
sys.dont_write_bytecode 
# If this is true, Python won’t try to write .pyc or .pyo files on the import of source modules. 
# This value is initially set to True or False depending on the -B command line option and the PYTHONDONTWRITEBYTECODE environment variable, 
# but you can set it yourself to control bytecode file generation.
# ............................................
sys.excepthook(type, value, traceback)  # This function prints out a given traceback and exception to sys.stderr.
# ............................................
sys.__displayhook__ 
sys.__excepthook__  # These objects contain the original values of displayhook and excepthook at the start of the program.
# ............................................
sys.exc_info()  # This function returns a tuple of three values that give information about the exception that is currently being handled
# ............................................
sys.exc_clear()     # This function clears all information relating to the current or last exception that occurred in the current thread
# ............................................
sys.exc_type 
sys.exc_value 
sys.exc_traceback 
# Deprecated since version 1.5: Use exc_info() instead.
# ............................................
sys.executable  # A string giving the absolute path of the executable binary for the Python interpreter
# ............................................
sys.exit([arg])     # Exit from Python. This is implemented by raising the SystemExit exception,
# ............................................
sys.flags   # The struct sequence flags exposes the status of command line flags. The attributes are read only.
# ............................................
sys.float_repr_style    # A string indicating how the repr() function behaves for floats
# ............................................
sys.getcheckinterval()  # Return the interpreter’s “check interval”; 
# ............................................
sys.getdefaultencoding()    # Return the name of the current default string encoding used by the Unicode implementation.
# ............................................
sys.getfilesystemencoding()     # Return the name of the encoding used to convert Unicode filenames into system file names, or None if the system default encoding is used
# ............................................
sys.getrefcount(object)     # Return the reference count of the object
# ............................................
sys.getsizeof(object[, default])    # Return the size of an object in bytes
# ............................................
sys.getprofile()    # Get the profiler function as set by setprofile().
# ............................................
sys.gettrace()  # Get the trace function as set by settrace().
# ............................................
sys.getwindowsversion()     # Return a named tuple describing the Windows version currently running.
# ............................................
sys.hexversion  # The version number encoded as a single integer.
# ............................................
sys.maxint  # The largest positive integer supported by Python’s regular integer type
# ............................................
sys.maxunicode  # An integer giving the largest supported code point for a Unicode character
# ............................................
sys.modules        # This is a dictionary that maps module names to modules which have already been loaded
# ............................................
sys.path    # A list of strings that specifies the search path for modules. Initialized from the environment variable PYTHONPATH, plus an installation-dependent default.
# ............................................
sys.platform    # This string contains a platform identifier that can be used to append platform-specific components to sys.path, for instance.
System                      platform value 

Linux (2.x and 3.x)         'linux2' 
Windows                     'win32' 
Windows/Cygwin              'cygwin' 
Mac OS X                    'darwin' 
OS/2                        'os2' 
OS/2 EMX                    'os2emx' 
RiscOS                      'riscos' 
AtheOS                      'atheos' 

# ............................................
# See also
# os.name has a coarser granularity. os.uname() gives system-dependent version information.
# The platform module provides detailed checks for the system’s identity.
# ............................................
sys.prefix  # A string giving the site-specific directory prefix where the platform independent Python files are installed
# ............................................
sys.stdin 
sys.stdout 
sys.stderr 
# File objects corresponding to the interpreter’s standard input, output and error streams
# ............................................
sys.subversion  # A triple (repo, branch, version) representing the Subversion information of the Python interpreter
# ............................................
sys.version     # A string containing the version number of the Python interpreter plus additional information on the build number and compiler used
# ............................................
sys.api_version     # The C API version for this interpreter. Programmers may find this useful when debugging version conflicts between Python and extension modules.
# ............................................
sys.version_info    # A tuple containing the five components of the version number: major, minor, micro, releaselevel, and serial.
# ............................................
sys.warnoptions     # This is an implementation detail of the warnings framework; do not modify this value
# ............................................
sys.winver  # The version number used to form registry keys on Windows platforms
# ............................................
